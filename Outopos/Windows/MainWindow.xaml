<Window x:Class="Outopos.Windows.MainWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:prop="clr-namespace:Outopos.Properties"     
        xmlns:local="clr-namespace:Outopos.Windows" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        mc:Ignorable="d" 
        FontFamily="{Binding Path=FontFamily, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToFontFamilyConverter}}"
        FontSize="{Binding Path=FontSize, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToDoubleConverter}}"
        Background="{DynamicResource WindowBackgroundBrush}"
        Top="{Binding Path=MainWindow_Top, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Left="{Binding Path=MainWindow_Left, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Height="{Binding Path=MainWindow_Height, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Width="{Binding Path=MainWindow_Width, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        WindowState="{Binding Path=MainWindow_WindowState, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        StateChanged="Window_StateChanged"
        Loaded="Window_Loaded"
        Closing="Window_Closing">

    <Window.CommandBindings>
        <CommandBinding Command="Copy" Executed="Execute_Copy" />
    </Window.CommandBindings>

    <Window.InputBindings>
        <KeyBinding Gesture="CTRL+C" Command="Copy" />
    </Window.InputBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="23" />
        </Grid.RowDefinitions>

        <Grid HorizontalAlignment="Left" Width="52">
            <Grid.Resources>

                <Style x:Key="_radioButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
                    <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Padding" Value="1" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <ControlTemplate.Resources>
                                    <Storyboard x:Key="HoverOn">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                    <Storyboard x:Key="HoverOff">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                    <Storyboard x:Key="CheckedOn">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                    <Storyboard x:Key="CheckedOff">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </ControlTemplate.Resources>
                                <Grid x:Name="grid">

                                    <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderBrush="Transparent" CornerRadius="3,3,3,3" />
                                    <Border x:Name="CheckedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource GlyphBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" />
                                    <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource GlyphBrush}" />

                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                                        </Trigger.ExitActions>
                                        <Trigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                                        </Trigger.EnterActions>
                                    </Trigger>
                                    <Trigger Property="IsKeyboardFocused" Value="true"/>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard"/>
                                        </Trigger.ExitActions>
                                        <Trigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard"/>
                                        </Trigger.EnterActions>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <!--<Setter Property="Foreground" Value="#ADADAD" />-->
                                        <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}"/>
                                        <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                                        <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource BlackColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>

                <Style x:Key="_buttonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="FocusVisualStyle" Value="{DynamicResource GlyphBrush}" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <ControlTemplate.Resources>
                                    <Storyboard x:Key="HoverOn">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>

                                    </Storyboard>
                                    <Storyboard x:Key="HoverOff">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>

                                    </Storyboard>
                                    <Storyboard x:Key="PressedOn">

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>

                                    </Storyboard>
                                    <Storyboard x:Key="PressedOff">

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>

                                    </Storyboard>
                                    <Storyboard x:Key="FocusedOn">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                    <Storyboard x:Key="FocussedOff">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>

                                </ControlTemplate.Resources>
                                <Grid x:Name="Grid">
                                    <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource GlyphBrush}" />
                                    <Border x:Name="PressedBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource GlyphBrush}" />
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                                    <Border x:Name="FocusVisualElement" IsHitTestVisible="false" BorderThickness="1" CornerRadius="3,3,3,3" Margin="1,1,1,1" Opacity="0" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsKeyboardFocused" Value="true">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard" />
                                        </Trigger.ExitActions>
                                        <Trigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard" />
                                        </Trigger.EnterActions>

                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                                        </Trigger.ExitActions>
                                        <Trigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                                        </Trigger.EnterActions>

                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                                        </Trigger.ExitActions>
                                        <Trigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                                        </Trigger.EnterActions>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="true" />
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Opacity" TargetName="Grid" Value="0.5" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>       
            </Grid.Resources>

            <RadioButton x:Name="_wikiRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Wiki" HorizontalAlignment="Left" VerticalAlignment="Top" Height="40" Width="40" Margin="6,6,0,0" IsChecked="True"/>
            <RadioButton x:Name="_chatRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Chat" HorizontalAlignment="Left" VerticalAlignment="Top" Height="40" Width="40" Margin="6,51,0,0"/>
            <RadioButton x:Name="_mailRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Mail" HorizontalAlignment="Left" VerticalAlignment="Top" Height="40" Width="40" Margin="6,96,0,0"/>
            <RadioButton x:Name="_searchRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Search" HorizontalAlignment="Left" VerticalAlignment="Top" Height="40" Width="40" Margin="6,141,0,0"/>            
            <Button x:Name="_optionsRadioButton" Style="{StaticResource _buttonStyle}" Content="Options" HorizontalAlignment="Left" VerticalAlignment="Top" Height="40" Width="40" Margin="6,186,0,0"/>
        </Grid>

        <Grid Margin="52,6,6,6">          
            <ContentControl Name="_wikiContentControl" Visibility="{Binding ElementName=_wikiRadioButton, Path=IsChecked, Converter={StaticResource _boolToVisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <ContentControl Name="_chatContentControl" Visibility="{Binding ElementName=_chatRadioButton, Path=IsChecked, Converter={StaticResource _boolToVisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <ContentControl Name="_mailContentControl" Visibility="{Binding ElementName=_mailRadioButton, Path=IsChecked, Converter={StaticResource _boolToVisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <ContentControl Name="_searchContentControl" Visibility="{Binding ElementName=_searchRadioButton, Path=IsChecked, Converter={StaticResource _boolToVisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <ContentControl Name="_settingsContentControl" Visibility="{Binding IsChecked, Converter={StaticResource _boolToVisibilityConverter}, ElementName=_optionsRadioButton}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
        </Grid>

        <StatusBar Grid.Row="1" 
                    FontFamily="{Binding Path=FontFamily, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToFontFamilyConverter}}"
                    FontSize="{Binding Path=FontSize, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToDoubleConverter}}" >
            <StatusBarItem>
                <Grid>
                    <Image Name="_stateImage" Margin="3,0,3,0" Width="16" Height="16" />
                </Grid>
            </StatusBarItem>
            <StatusBarItem HorizontalContentAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding Path=MainWindow_SendingSpeed, Source={StaticResource ResourcesInstance}}" Margin="0,0,6,0" />
                    <TextBlock Name="_sendingSpeedTextBlock" Margin="0,0,6,0" MinWidth="80" />
                    <TextBlock Text="{Binding Path=MainWindow_ReceivingSpeed, Source={StaticResource ResourcesInstance}}" Margin="0,0,6,0" />
                    <TextBlock Name="_receivingSpeedTextBlock"  Margin="0,0,6,0" MinWidth="80" />
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
