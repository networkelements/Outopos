<Window x:Class="Outopos.Windows.MainWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:prop="clr-namespace:Outopos.Properties"     
        xmlns:local="clr-namespace:Outopos.Windows" 
        FontFamily="{Binding Path=FontFamily, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToFontFamilyConverter}}"
        FontSize="{Binding Path=FontSize, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToDoubleConverter}}"
        Background="{DynamicResource WindowBackgroundBrush}"
        Top="{Binding Path=MainWindow_Top, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Left="{Binding Path=MainWindow_Left, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Height="{Binding Path=MainWindow_Height, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Width="{Binding Path=MainWindow_Width, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        WindowState="{Binding Path=MainWindow_WindowState, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        StateChanged="Window_StateChanged"
        Loaded="Window_Loaded"
        Closing="Window_Closing">
    <Window.Resources>
        <DataTemplate x:Key="_logListBox_Template">
            <TextBlock Text="{Binding Mode=OneWay}" TextWrapping="Wrap"/>
        </DataTemplate>

        <Style x:Key="_radioButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type ToggleButton} }">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="HoverOn">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="HoverOff">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="CheckedOn">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="CheckedOff">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="grid">

                            <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderBrush="Transparent" CornerRadius="3,3,3,3" />
                            <Border x:Name="CheckedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource GlyphBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" />
                            <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource GlyphBrush}" />
                            <!--<Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                        <GradientStop Color="#26FFFFFF" Offset="0" />
                                        <GradientStop Color="#00FFFFFF" Offset="1" />
                                        <GradientStop Color="#26FFFFFF" Offset="0.467" />
                                        <GradientStop Color="#00FFFFFF" Offset="0.475" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>-->

                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="IsChecked" Value="true">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard"/>
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <!--<Setter Property="Foreground" Value="#ADADAD" />-->
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                                <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Foreground">
                        <Setter.Value>
                            <SolidColorBrush Color="{DynamicResource BlackColor}" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="Copy" Executed="Execute_Copy" />
    </Window.CommandBindings>

    <Window.InputBindings>
        <KeyBinding Gesture="CTRL+C" Command="Copy" />
    </Window.InputBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="438*" />
            <RowDefinition Height="23" />
        </Grid.RowDefinitions>

        <Grid HorizontalAlignment="Left" Height="446" VerticalAlignment="Top" Width="92">
            <RadioButton x:Name="_wikiRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Wiki" HorizontalAlignment="Left" VerticalAlignment="Top" Height="80" Width="80" Margin="6,6,0,0" RenderTransformOrigin="-0.375,0.488"/>
            <RadioButton x:Name="_chatRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Chat" HorizontalAlignment="Left" VerticalAlignment="Top" Height="80" Width="80" Margin="6,91,0,0"/>
            <RadioButton x:Name="_mailRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Mail" HorizontalAlignment="Left" VerticalAlignment="Top" Height="80" Width="80" Margin="6,176,0,0"/>
            <RadioButton x:Name="_settingsRadioButton" Style="{StaticResource _radioButtonStyle}" Content="Settings" HorizontalAlignment="Left" VerticalAlignment="Top" Height="80" Width="80" Margin="6,261,0,0"/>
        </Grid>

        <StatusBar Grid.Row="1" 
                    FontFamily="{Binding Path=FontFamily, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToFontFamilyConverter}}"
                    FontSize="{Binding Path=FontSize, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToDoubleConverter}}" >
            <StatusBarItem>
                <Grid>
                    <TextBlock Name="_stateTextBlock" Margin="6,0,0,0" />
                </Grid>
            </StatusBarItem>
            <StatusBarItem HorizontalContentAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding Path=MainWindow_SendSpeed, Source={StaticResource ResourcesInstance}}" Margin="0,0,6,0" />
                    <TextBlock Name="_sendSpeedTextBlock" Margin="0,0,6,0" MinWidth="80" />
                    <TextBlock Text="{Binding Path=MainWindow_ReceiveSpeed, Source={StaticResource ResourcesInstance}}" Margin="0,0,6,0" />
                    <TextBlock Name="_receiveSpeedTextBlock"  Margin="0,0,6,0" MinWidth="80" />
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
