<Window x:Class="Outopos.Windows.ChatMessageEditWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:prop="clr-namespace:Outopos.Properties"     
        xmlns:local="clr-namespace:Outopos.Windows" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        mc:Ignorable="d" 
        FontFamily="{Binding Path=FontFamily, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToFontFamilyConverter}}"
        FontSize="{Binding Path=FontSize, Mode=OneWay, Source={StaticResource ResourcesInstance}, Converter={StaticResource _stringToDoubleConverter}}"
        Background="{DynamicResource WindowBackgroundBrush}"
        Title="{Binding Path=ChatMessageEditWindow_Title, Source={StaticResource ResourcesInstance}}"
        Top="{Binding Path=ChatMessageEditWindow_Top, Mode=TwoWay, Source={x:Static prop:Settings.Instance}, Converter={StaticResource _topRelativeDoubleConverter}}"
        Left="{Binding Path=ChatMessageEditWindow_Left, Mode=TwoWay, Source={x:Static prop:Settings.Instance}, Converter={StaticResource _leftRelativeDoubleConverter}}"
        Height="{Binding Path=ChatMessageEditWindow_Height, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        Width="{Binding Path=ChatMessageEditWindow_Width, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}"
        WindowState="{Binding Path=ChatMessageEditWindow_WindowState, Mode=TwoWay, Source={x:Static prop:Settings.Instance}}">

    <Grid FocusManager.FocusedElement="{Binding ElementName=_commentTextBox}">
        <Button Content="{Binding Path=ChatMessageEditWindow_Ok, Source={StaticResource ResourcesInstance}}" Height="23" HorizontalAlignment="Right" Margin="0,0,93,12" Name="_okButton" IsEnabled="False" VerticalAlignment="Bottom" Width="75" Click="_okButton_Click" IsDefault="True" />
        <Button Content="{Binding Path=ChatMessageEditWindow_Cancel, Source={StaticResource ResourcesInstance}}" Height="23" HorizontalAlignment="Right" Margin="0,0,12,12" Name="_cancelButton" VerticalAlignment="Bottom" Width="75" Click="_cancelButton_Click" IsCancel="True" />
        <Label Content="" Height="24" HorizontalAlignment="Right" Margin="0,0,12,41" VerticalAlignment="Bottom" VerticalContentAlignment="Center" Width="120" Name="_countLabel" HorizontalContentAlignment="Right" />
        <TabControl Name="_tabControl" Margin="0,0,0,71" SelectionChanged="_tabControl_SelectionChanged">
            <TabItem Header="{Binding Path=ChatMessageEditWindow_Edit, Source={StaticResource ResourcesInstance}}" Name="_editTabItem">
                <Grid>
                    <TextBox AcceptsReturn="True" HorizontalScrollBarVisibility="Disabled" Name="_commentTextBox" VerticalScrollBarVisibility="Auto" TextChanged="_commentTextBox_TextChanged" TextWrapping="Wrap" AcceptsTab="True" Margin="6" />
                </Grid>
            </TabItem>
            <TabItem Header="{Binding Path=ChatMessageEditWindow_Preview, Source={StaticResource ResourcesInstance}}" Name="_previewTabItem">
                <Grid>
                    <Grid.Resources>
                        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                            <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <ControlTemplate.Resources>
                                            <Storyboard x:Key="HoverOn">
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                            <Storyboard x:Key="HoverOff">
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                            <Storyboard x:Key="PressedOn">
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                            <Storyboard x:Key="PressedOff">
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </ControlTemplate.Resources>
                                        <Border Padding="{TemplateBinding Padding}" Background="Transparent"  BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                                            <Grid SnapsToDevicePixels="False" Background="Transparent">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="19" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                                                <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
                                                <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="true">
                                                <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                                                <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />

                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                                                </Trigger.ExitActions>
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                                                </Trigger.EnterActions>

                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="true">
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                                                </Trigger.ExitActions>
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                                                </Trigger.EnterActions>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style TargetType="{x:Type Expander}">
                            <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Expander}">
                                        <Border x:Name="Border" Opacity="1" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" Background="{TemplateBinding Background}">
                                            <DockPanel x:Name="dockPanel">
                                                <ToggleButton FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1,1,1,0" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" />
                                                <Border Visibility="Collapsed" BorderThickness="1,0,1,1" CornerRadius="3,3,3,3" x:Name="border" Margin="1,1,1,1">
                                                    <ContentPresenter Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,1,1" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom" />
                                                </Border>
                                            </DockPanel>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsExpanded" Value="true">
                                                <Setter Property="Visibility" TargetName="border" Value="Visible" />
                                            </Trigger>
                                            <Trigger Property="ExpandDirection" Value="Down" />
                                            <Trigger Property="ExpandDirection" Value="Right">
                                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
                                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
                                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" />
                                            </Trigger>
                                            <Trigger Property="ExpandDirection" Value="Up">
                                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" />
                                            </Trigger>
                                            <Trigger Property="ExpandDirection" Value="Left">
                                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style TargetType="{x:Type RichTextBox}">
                            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="AllowDrop" Value="true" />
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type RichTextBox}">
                                        <Grid Background="{TemplateBinding Background}">
                                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource NuclearScrollViewer}" />
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                            <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="#FF000000"/>
                        </Style>
                    </Grid.Resources>

                    <local:RichTextBoxEx Margin="6" x:Name="_richTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" PreviewMouseRightButtonDown="_richTextBox_PreviewMouseRightButtonDown" />
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
